// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SystemMedyczny.Model;

#nullable disable

namespace SystemMedyczny.Model.Migrations
{
    [DbContext(typeof(BazaDanych))]
    [Migration("20240715120745_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("SystemMedyczny.Model.Apteka", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Adres")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataUtworzenia")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nazwa")
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefon")
                        .HasColumnType("TEXT");

                    b.Property<string>("Uwagi")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Apteki");
                });

            modelBuilder.Entity("SystemMedyczny.Model.FirmaFarmaceutyczna", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataUtworzenia")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nazwa")
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefon")
                        .HasColumnType("TEXT");

                    b.Property<string>("Uwagi")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FirmyFarmaceutyczne");
                });

            modelBuilder.Entity("SystemMedyczny.Model.Lek", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataUtworzenia")
                        .HasColumnType("TEXT");

                    b.Property<long?>("FirmaFarmaceutycznaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NazwaHandlowa")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubstancjaAktywna")
                        .HasColumnType("TEXT");

                    b.Property<string>("Uwagi")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FirmaFarmaceutycznaId");

                    b.ToTable("Leki");
                });

            modelBuilder.Entity("SystemMedyczny.Model.LekApteka", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AptekaId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Cena")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataUtworzenia")
                        .HasColumnType("TEXT");

                    b.Property<long?>("LekId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Uwagi")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AptekaId");

                    b.HasIndex("LekId");

                    b.ToTable("LekApteka");
                });

            modelBuilder.Entity("SystemMedyczny.Model.LekRecepta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataUtworzenia")
                        .HasColumnType("TEXT");

                    b.Property<int>("Ilosc")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LekId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ReceptaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Uwagi")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LekId");

                    b.HasIndex("ReceptaId");

                    b.ToTable("LekRecepta");
                });

            modelBuilder.Entity("SystemMedyczny.Model.Lekarz", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Adres")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataRozpoczeciaPracy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataUrodzenia")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataUtworzenia")
                        .HasColumnType("TEXT");

                    b.Property<string>("Imie")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nazwisko")
                        .HasColumnType("TEXT");

                    b.Property<string>("NrUbezpieczenia")
                        .HasColumnType("TEXT");

                    b.Property<string>("Specjalizacja")
                        .HasColumnType("TEXT");

                    b.Property<string>("Uwagi")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Lekarze");
                });

            modelBuilder.Entity("SystemMedyczny.Model.Pacjent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Adres")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataUrodzenia")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataUtworzenia")
                        .HasColumnType("TEXT");

                    b.Property<string>("Imie")
                        .HasColumnType("TEXT");

                    b.Property<long?>("LekarzId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nazwisko")
                        .HasColumnType("TEXT");

                    b.Property<string>("NrUbezpieczenia")
                        .HasColumnType("TEXT");

                    b.Property<string>("Uwagi")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LekarzId");

                    b.ToTable("Pacjenci");
                });

            modelBuilder.Entity("SystemMedyczny.Model.Recepta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataUtworzenia")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataWystawienia")
                        .HasColumnType("TEXT");

                    b.Property<long?>("LekarzId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("PacjentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Uwagi")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LekarzId");

                    b.HasIndex("PacjentId");

                    b.ToTable("Recepty");
                });

            modelBuilder.Entity("SystemMedyczny.Model.Lek", b =>
                {
                    b.HasOne("SystemMedyczny.Model.FirmaFarmaceutyczna", "FirmaFarmaceutyczna")
                        .WithMany()
                        .HasForeignKey("FirmaFarmaceutycznaId");

                    b.Navigation("FirmaFarmaceutyczna");
                });

            modelBuilder.Entity("SystemMedyczny.Model.LekApteka", b =>
                {
                    b.HasOne("SystemMedyczny.Model.Apteka", "Apteka")
                        .WithMany("Leki")
                        .HasForeignKey("AptekaId");

                    b.HasOne("SystemMedyczny.Model.Lek", "Lek")
                        .WithMany()
                        .HasForeignKey("LekId");

                    b.Navigation("Apteka");

                    b.Navigation("Lek");
                });

            modelBuilder.Entity("SystemMedyczny.Model.LekRecepta", b =>
                {
                    b.HasOne("SystemMedyczny.Model.Lek", "Lek")
                        .WithMany()
                        .HasForeignKey("LekId");

                    b.HasOne("SystemMedyczny.Model.Recepta", "Recepta")
                        .WithMany("Leki")
                        .HasForeignKey("ReceptaId");

                    b.Navigation("Lek");

                    b.Navigation("Recepta");
                });

            modelBuilder.Entity("SystemMedyczny.Model.Pacjent", b =>
                {
                    b.HasOne("SystemMedyczny.Model.Lekarz", "Lekarz")
                        .WithMany()
                        .HasForeignKey("LekarzId");

                    b.Navigation("Lekarz");
                });

            modelBuilder.Entity("SystemMedyczny.Model.Recepta", b =>
                {
                    b.HasOne("SystemMedyczny.Model.Lekarz", "Lekarz")
                        .WithMany()
                        .HasForeignKey("LekarzId");

                    b.HasOne("SystemMedyczny.Model.Pacjent", "Pacjent")
                        .WithMany()
                        .HasForeignKey("PacjentId");

                    b.Navigation("Lekarz");

                    b.Navigation("Pacjent");
                });

            modelBuilder.Entity("SystemMedyczny.Model.Apteka", b =>
                {
                    b.Navigation("Leki");
                });

            modelBuilder.Entity("SystemMedyczny.Model.Recepta", b =>
                {
                    b.Navigation("Leki");
                });
#pragma warning restore 612, 618
        }
    }
}
